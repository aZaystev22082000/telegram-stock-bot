package main

import (
	"fmt"
	"log"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –î–û–ë–ê–í–õ–ï–ù–û: —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º
func AddToFavorites(chatID int64, ticker string) error {
	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤
	var count int
	err := db.QueryRow("SELECT COUNT(*) FROM user_favorites WHERE chat_id = ?", chatID).Scan(&count)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: %v", err)
	}

	if count >= 5 {
		return fmt.Errorf("–Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 5 —Ç–∏–∫–µ—Ä–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
	}

	// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–∏–∫–µ—Ä
	var existingTicker string
	err = db.QueryRow("SELECT ticker FROM user_favorites WHERE chat_id = ? AND ticker = ?", chatID, ticker).Scan(&existingTicker)
	if err == nil {
		return fmt.Errorf("—Ç–∏–∫–µ—Ä %s —É–∂–µ –µ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º", ticker)
	}

	// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–∫–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —á–µ—Ä–µ–∑ API
	_, err = getStockPrice(ticker, "Z33Q2SGS87R4NCV9", 1)
	if err != nil {
		return fmt.Errorf("—Ç–∏–∫–µ—Ä %s –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ", ticker)
	}

	// 4. –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	_, err = db.Exec("INSERT INTO user_favorites (chat_id, ticker) VALUES (?, ?)", chatID, ticker)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É: %v", err)
	}

	log.Printf("–î–æ–±–∞–≤–ª–µ–Ω —Ç–∏–∫–µ—Ä %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", ticker, chatID)
	return nil
}

func RemoveFromFavorites(chatID int64, ticker string) error {
	result, err := db.Exec("DELETE FROM user_favorites WHERE chat_id = ? AND ticker = ?", chatID, ticker)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %v", err)
	}

	rowsAffected, _ := result.RowsAffected()
	if rowsAffected == 0 {
		return fmt.Errorf("—Ç–∏–∫–µ—Ä %s –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º", ticker)
	}

	log.Printf("–£–¥–∞–ª–µ–Ω —Ç–∏–∫–µ—Ä %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", ticker, chatID)
	return nil
}

func GetFavorites(chatID int64) ([]string, error) {
	rows, err := db.Query("SELECT ticker FROM user_favorites WHERE chat_id = ? ORDER BY added_at DESC", chatID)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: %v", err)
	}
	defer rows.Close()

	var favorites []string
	for rows.Next() {
		var ticker string
		if err := rows.Scan(&ticker); err != nil {
			return nil, err
		}
		favorites = append(favorites, ticker)
	}

	return favorites, nil
}

func GetFavoritesWithPrices(chatID int64) (map[string]string, error) {
	tickers, err := GetFavorites(chatID)
	if err != nil {
		return nil, err
	}

	result := make(map[string]string)
	for _, ticker := range tickers {
		price, err := getStockPrice(ticker, "Z33Q2SGS87R4NCV9", 1)
		if err != nil {
			result[ticker] = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã"
		} else {
			result[ticker] = price
		}

		time.Sleep(300 * time.Millisecond)
	}

	return result, nil
}

func runBot() {
	bot, err := tgbotapi.NewBotAPI("8167489635:AAFPlmh2Y--sETZaz-josSMVxMDU87PQqzU")
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

		//if update.Message.From.UserName == "sgoreela" {
		//	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –∏–¥–∏—Ç–µ –Ω–∞—Ö—É–π")
		//	if _, err := bot.Send(msg); err != nil {
		//		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		//	}
		//	continue // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		//}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				msg.Text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω –∞–∫—Ü–∏–π.\n\n" +
					"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
					"/add <—Ç–∏–∫–µ—Ä> - –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n" +
					"/remove <—Ç–∏–∫–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\n" +
					"/list - –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n" +
					"/prices - —Ü–µ–Ω—ã –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π\n\n" +
					"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER.ME –∏–ª–∏ AAPL), –∏ —è –Ω–∞–π–¥—É –µ–≥–æ —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å."

			// –î–û–ë–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add
			case "add":
				ticker := strings.TrimSpace(update.Message.CommandArguments())
				if ticker == "" {
					msg.Text = "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /add SBER.ME"
				} else {
					err := AddToFavorites(update.Message.Chat.ID, ticker)
					if err != nil {
						msg.Text = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err)
					} else {
						msg.Text = fmt.Sprintf("‚úÖ –¢–∏–∫–µ—Ä %s –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", ticker)
					}
				}

			// –î–û–ë–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /remove
			case "remove":
				ticker := strings.TrimSpace(update.Message.CommandArguments())
				if ticker == "" {
					msg.Text = "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /remove SBER.ME"
				} else {
					err := RemoveFromFavorites(update.Message.Chat.ID, ticker)
					if err != nil {
						msg.Text = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err)
					} else {
						msg.Text = fmt.Sprintf("‚úÖ –¢–∏–∫–µ—Ä %s —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", ticker)
					}
				}

			// –î–û–ë–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list
			case "list":
				favorites, err := GetFavorites(update.Message.Chat.ID)
				if err != nil {
					msg.Text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
				} else if len(favorites) == 0 {
					msg.Text = "üì≠ –í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–∏–∫–µ—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π /add <—Ç–∏–∫–µ—Ä>"
				} else {
					msg.Text = "‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã:\n" + strings.Join(favorites, "\n") +
						"\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /prices"
				}

			// –î–û–ë–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /prices
			case "prices":
				prices, err := GetFavoritesWithPrices(update.Message.Chat.ID)
				if err != nil {
					msg.Text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω"
				} else if len(prices) == 0 {
					msg.Text = "üì≠ –í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç"
				} else {
					var priceList []string
					for ticker, price := range prices {
						priceList = append(priceList, fmt.Sprintf("%s: %s", ticker, price))
					}
					msg.Text = "üìä –¶–µ–Ω—ã –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π:\n" + strings.Join(priceList, "\n")
				}

			default:
				msg.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏."
			}
		} else {
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç–∏–∫–µ—Ä
			ticker := strings.TrimSpace(update.Message.Text)
			if ticker == "" {
				msg.Text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–∏–∫–µ—Ä. –ù–∞–ø—Ä–∏–º–µ—Ä: SBER.ME"
			} else {
				price, err := getStockPrice(ticker, "Z33Q2SGS87R4NCV9", 3)
				if err != nil {
					msg.Text = fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %v", err)
				} else {
					msg.Text = fmt.Sprintf("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ %s: %s", ticker, price)
				}
			}
		}

		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	}
}
